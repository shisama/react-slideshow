'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * switch target DOMElement to fullscreen mode.
 * @param element {Element} DOMElement that you want to make fullscreen.
 * @param callback {Function} callback function after calling fullscreen api.
 */
function switchFullscreen(element, callback) {
  if (!isFullscreen()) {
    enterFullscreen(element);
    fullScreenChange(function (event) {
      if (isFullscreen()) {
        callback(true);
      } else {
        callback(false);
      }
    });
  } else {
    exitFullscreen(element);
  }
}

/**
 * check whether fullscreen or not.
 * @returns {boolean}
 */
function isFullscreen() {
  if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
    return false;
  }
  return true;
}

/**
 * enter fullscreen mode.
 * @param {Element} element
 */
function enterFullscreen(element) {
  if (element.requestFullscreen) {
    element.requestFullscreen();
  } else if (element.msRequestFullscreen) {
    element.msRequestFullscreen();
  } else if (element.mozRequestFullScreen) {
    element.parentElement.mozRequestFullScreen();
    element.style.height = '70%';
    element.style.width = '70%';
    element.style.margin = 'auto';
  } else if (element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
  }
}

/**
 * exit fullscreen mode.
 * @param {Element} element
 */
function exitFullscreen(element) {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
    element.style = {};
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  }
}

/**
 * injection function to onfullscreenchange.
 * @param callback
 */
function fullScreenChange(callback) {
  if (document.fullscreenEnabled) {
    document.addEventListener('fullscreenchange', callback);
  } else if (document.mozFullScreenEnabled) {
    document.onmozfullscreenchange = callback;
  } else if (document.webkitFullscreenEnabled) {
    document.addEventListener('webkitfullscreenchange', callback);
  } else if (document.msFullscreenEnabled) {
    document.addEventListener('msfullscreenchange', callback);
  }
}

exports.default = switchFullscreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mdWxsc2NyZWVuLmpzIl0sIm5hbWVzIjpbInN3aXRjaEZ1bGxzY3JlZW4iLCJlbGVtZW50IiwiY2FsbGJhY2siLCJpc0Z1bGxzY3JlZW4iLCJlbnRlckZ1bGxzY3JlZW4iLCJmdWxsU2NyZWVuQ2hhbmdlIiwiZXZlbnQiLCJleGl0RnVsbHNjcmVlbiIsImRvY3VtZW50IiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJtb3pGdWxsU2NyZWVuRWxlbWVudCIsIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50IiwibXNGdWxsc2NyZWVuRWxlbWVudCIsInJlcXVlc3RGdWxsc2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsIm1velJlcXVlc3RGdWxsU2NyZWVuIiwicGFyZW50RWxlbWVudCIsInN0eWxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJtYXJnaW4iLCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbiIsIkVsZW1lbnQiLCJBTExPV19LRVlCT0FSRF9JTlBVVCIsIm1zRXhpdEZ1bGxzY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJmdWxsc2NyZWVuRW5hYmxlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJtb3pGdWxsU2NyZWVuRW5hYmxlZCIsIm9ubW96ZnVsbHNjcmVlbmNoYW5nZSIsIndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkIiwibXNGdWxsc2NyZWVuRW5hYmxlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7QUFLQSxTQUFTQSxnQkFBVCxDQUEwQkMsT0FBMUIsRUFBbUNDLFFBQW5DLEVBQTZDO0FBQzNDLE1BQUksQ0FBQ0MsY0FBTCxFQUFxQjtBQUNuQkMsb0JBQWdCSCxPQUFoQjtBQUNBSSxxQkFBaUIsVUFBU0MsS0FBVCxFQUFnQjtBQUMvQixVQUFJSCxjQUFKLEVBQW9CO0FBQ2xCRCxpQkFBUyxJQUFUO0FBQ0QsT0FGRCxNQUVPO0FBQ0xBLGlCQUFTLEtBQVQ7QUFDRDtBQUNGLEtBTkQ7QUFPRCxHQVRELE1BU087QUFDTEssbUJBQWVOLE9BQWY7QUFDRDtBQUNGOztBQUVEOzs7O0FBSUEsU0FBU0UsWUFBVCxHQUF3QjtBQUN0QixNQUNFLENBQUNLLFNBQVNDLGlCQUFWLElBQ0EsQ0FBQ0QsU0FBU0Usb0JBRFYsSUFFQSxDQUFDRixTQUFTRyx1QkFGVixJQUdBLENBQUNILFNBQVNJLG1CQUpaLEVBS0U7QUFDQSxXQUFPLEtBQVA7QUFDRDtBQUNELFNBQU8sSUFBUDtBQUNEOztBQUVEOzs7O0FBSUEsU0FBU1IsZUFBVCxDQUF5QkgsT0FBekIsRUFBa0M7QUFDaEMsTUFBSUEsUUFBUVksaUJBQVosRUFBK0I7QUFDN0JaLFlBQVFZLGlCQUFSO0FBQ0QsR0FGRCxNQUVPLElBQUlaLFFBQVFhLG1CQUFaLEVBQWlDO0FBQ3RDYixZQUFRYSxtQkFBUjtBQUNELEdBRk0sTUFFQSxJQUFJYixRQUFRYyxvQkFBWixFQUFrQztBQUN2Q2QsWUFBUWUsYUFBUixDQUFzQkQsb0JBQXRCO0FBQ0FkLFlBQVFnQixLQUFSLENBQWNDLE1BQWQsR0FBdUIsS0FBdkI7QUFDQWpCLFlBQVFnQixLQUFSLENBQWNFLEtBQWQsR0FBc0IsS0FBdEI7QUFDQWxCLFlBQVFnQixLQUFSLENBQWNHLE1BQWQsR0FBdUIsTUFBdkI7QUFDRCxHQUxNLE1BS0EsSUFBSW5CLFFBQVFvQix1QkFBWixFQUFxQztBQUMxQ3BCLFlBQVFvQix1QkFBUixDQUFnQ0MsUUFBUUMsb0JBQXhDO0FBQ0Q7QUFDRjs7QUFFRDs7OztBQUlBLFNBQVNoQixjQUFULENBQXdCTixPQUF4QixFQUFpQztBQUMvQixNQUFJTyxTQUFTRCxjQUFiLEVBQTZCO0FBQzNCQyxhQUFTRCxjQUFUO0FBQ0QsR0FGRCxNQUVPLElBQUlDLFNBQVNnQixnQkFBYixFQUErQjtBQUNwQ2hCLGFBQVNnQixnQkFBVDtBQUNELEdBRk0sTUFFQSxJQUFJaEIsU0FBU2lCLG1CQUFiLEVBQWtDO0FBQ3ZDakIsYUFBU2lCLG1CQUFUO0FBQ0F4QixZQUFRZ0IsS0FBUixHQUFnQixFQUFoQjtBQUNELEdBSE0sTUFHQSxJQUFJVCxTQUFTa0Isb0JBQWIsRUFBbUM7QUFDeENsQixhQUFTa0Isb0JBQVQ7QUFDRDtBQUNGOztBQUVEOzs7O0FBSUEsU0FBU3JCLGdCQUFULENBQTBCSCxRQUExQixFQUFvQztBQUNsQyxNQUFJTSxTQUFTbUIsaUJBQWIsRUFBZ0M7QUFDOUJuQixhQUFTb0IsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDMUIsUUFBOUM7QUFDRCxHQUZELE1BRU8sSUFBSU0sU0FBU3FCLG9CQUFiLEVBQW1DO0FBQ3hDckIsYUFBU3NCLHFCQUFULEdBQWlDNUIsUUFBakM7QUFDRCxHQUZNLE1BRUEsSUFBSU0sU0FBU3VCLHVCQUFiLEVBQXNDO0FBQzNDdkIsYUFBU29CLGdCQUFULENBQTBCLHdCQUExQixFQUFvRDFCLFFBQXBEO0FBQ0QsR0FGTSxNQUVBLElBQUlNLFNBQVN3QixtQkFBYixFQUFrQztBQUN2Q3hCLGFBQVNvQixnQkFBVCxDQUEwQixvQkFBMUIsRUFBZ0QxQixRQUFoRDtBQUNEO0FBQ0Y7O2tCQUVjRixnQiIsImZpbGUiOiJmdWxsc2NyZWVuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzd2l0Y2ggdGFyZ2V0IERPTUVsZW1lbnQgdG8gZnVsbHNjcmVlbiBtb2RlLlxuICogQHBhcmFtIGVsZW1lbnQge0VsZW1lbnR9IERPTUVsZW1lbnQgdGhhdCB5b3Ugd2FudCB0byBtYWtlIGZ1bGxzY3JlZW4uXG4gKiBAcGFyYW0gY2FsbGJhY2sge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbiBhZnRlciBjYWxsaW5nIGZ1bGxzY3JlZW4gYXBpLlxuICovXG5mdW5jdGlvbiBzd2l0Y2hGdWxsc2NyZWVuKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gIGlmICghaXNGdWxsc2NyZWVuKCkpIHtcbiAgICBlbnRlckZ1bGxzY3JlZW4oZWxlbWVudCk7XG4gICAgZnVsbFNjcmVlbkNoYW5nZShmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGlzRnVsbHNjcmVlbigpKSB7XG4gICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGV4aXRGdWxsc2NyZWVuKGVsZW1lbnQpO1xuICB9XG59XG5cbi8qKlxuICogY2hlY2sgd2hldGhlciBmdWxsc2NyZWVuIG9yIG5vdC5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0Z1bGxzY3JlZW4oKSB7XG4gIGlmIChcbiAgICAhZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgJiZcbiAgICAhZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgJiZcbiAgICAhZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgJiZcbiAgICAhZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudFxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogZW50ZXIgZnVsbHNjcmVlbiBtb2RlLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGVudGVyRnVsbHNjcmVlbihlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICBlbGVtZW50LnBhcmVudEVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTtcbiAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9ICc3MCUnO1xuICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSAnNzAlJztcbiAgICBlbGVtZW50LnN0eWxlLm1hcmdpbiA9ICdhdXRvJztcbiAgfSBlbHNlIGlmIChlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbihFbGVtZW50LkFMTE9XX0tFWUJPQVJEX0lOUFVUKTtcbiAgfVxufVxuXG4vKipcbiAqIGV4aXQgZnVsbHNjcmVlbiBtb2RlLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGV4aXRGdWxsc2NyZWVuKGVsZW1lbnQpIHtcbiAgaWYgKGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XG4gICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7XG4gICAgZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbigpO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4pIHtcbiAgICBkb2N1bWVudC5tb3pDYW5jZWxGdWxsU2NyZWVuKCk7XG4gICAgZWxlbWVudC5zdHlsZSA9IHt9O1xuICB9IGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XG4gICAgZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4oKTtcbiAgfVxufVxuXG4vKipcbiAqIGluamVjdGlvbiBmdW5jdGlvbiB0byBvbmZ1bGxzY3JlZW5jaGFuZ2UuXG4gKiBAcGFyYW0gY2FsbGJhY2tcbiAqL1xuZnVuY3Rpb24gZnVsbFNjcmVlbkNoYW5nZShjYWxsYmFjaykge1xuICBpZiAoZG9jdW1lbnQuZnVsbHNjcmVlbkVuYWJsZWQpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlJywgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbmFibGVkKSB7XG4gICAgZG9jdW1lbnQub25tb3pmdWxsc2NyZWVuY2hhbmdlID0gY2FsbGJhY2s7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVuYWJsZWQpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVuYWJsZWQpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtc2Z1bGxzY3JlZW5jaGFuZ2UnLCBjYWxsYmFjayk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc3dpdGNoRnVsbHNjcmVlbjtcbiJdfQ==